/* eslint-disable react/prop-types */
/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 all__floors.glb 
*/

import { useRef, useState } from "react";
import { useNavigate } from "react-router-dom";
import { motion } from "framer-motion-3d";
import { useGLTF, useAnimations, Html } from '@react-three/drei';
import { useFrame } from "@react-three/fiber";

const MeshComponent = ({ name, geometry, position, rotation, scale, baseColor, hoverColor, onClick }) => {
  const [hover, setHover] = useState(false);

  return (
    <motion.group
      whileHover={{ scale: 1.05 }}
      onClick={onClick}
      onPointerOver={(e) => {
        e.stopPropagation();
        setHover(true);
      }}
      onPointerOut={(e) => {
        e.stopPropagation();
        setHover(false);
      }}
    >
      <mesh name={name} geometry={geometry} position={position} rotation={rotation} scale={scale}>
        <meshBasicMaterial color={hover ? hoverColor : baseColor} blending={2} />
      </mesh>
    </motion.group>
  );
};

export function Building3({ gesture }) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF('/all__floors.glb');
  const { actions, names } = useAnimations(animations, group);
  const navigate = useNavigate();
  const [isClicked, setIsClicked] = useState(true);

  const handleCalloutClick = () => {
    setIsClicked(!isClicked);
    names.forEach((name) => {
      const action = actions[name];
      action.timeScale = isClicked ? 2 : -2;
      action.paused = false;
      action.repetitions = 1;
      action.reset().play().clampWhenFinished = true;
    });
  };

  const handleNavigationClick = (path) => {
    setIsClicked(!isClicked);
    navigate(path);
  };

  const [victoryHandled, setVictoryHandled] = useState(false);

  useFrame(() => {
    if (gesture === "Thumb_Down" && !victoryHandled) {
      setVictoryHandled(true);
      setIsClicked(!isClicked);
      names.forEach((name) => {
        const action = actions[name];
        action.timeScale = -2;
        action.paused = false;
        action.repetitions = 1;
        action.reset().play().clampWhenFinished = true;
      });
    }
    if (gesture === "Pointing_Up" && victoryHandled) {
      setVictoryHandled(false);
      setIsClicked(false);
      names.forEach((name) => {
        const action = actions[name];
        action.timeScale = 2;
        action.repetitions = 1;
        action.reset().play().clampWhenFinished = true;
      });
    }
  }, [gesture]);

  const stripe = useRef();
  const light = useRef();

  useFrame((state) => {
    const t = (0.5 + Math.sin(state.clock.elapsedTime * 5)) / 22;
    stripe.current.color.setRGB(32, 11 + t * 22, 2 + t * 61);
    light.current.intensity = 0.1 + t * 22;
  });

  return (
    <motion.group
      ref={group}
      onClick={(e) => {
        e.stopPropagation();
        handleCalloutClick();
      }}
      dispose={null}
      position={[-50, 0, 10]}
    >
      <group name="Scene">
        <MeshComponent
          name="GF"
          geometry={nodes.GF.geometry}
          position={[49.462, 0, -17.712]}
          rotation={[0, 1.494, 0]}
          scale={0.135}
          baseColor="#559DBD"
          hoverColor="#C1D8E0"
        />
        <MeshComponent
          name="1F"
          geometry={nodes['1F'].geometry}
          position={[49.462, 0, -17.712]}
          rotation={[0, 1.494, 0]}
          scale={38.904}
          baseColor="#BD1C34"
          hoverColor="#C1D8E0"
          onClick={() => handleNavigationClick('/building/floor')}
        />
        <MeshComponent
          name="2F"
          geometry={nodes['2F'].geometry}
          position={[49.462, 0, -17.712]}
          rotation={[0, 1.494, 0]}
          scale={0.225}
          baseColor="#559DBD"
          hoverColor="#C1D8E0"
        />
        <MeshComponent
          name="3F"
          geometry={nodes['3F'].geometry}
          position={[49.462, 0, -17.712]}
          rotation={[-Math.PI, 1.118, -Math.PI]}
          scale={0.149}
          baseColor="#559DBD"
          hoverColor="#C1D8E0"
        />
        <MeshComponent
          name="4F"
          geometry={nodes['4F'].geometry}
          position={[49.462, 0, -17.712]}
          rotation={[0, 1.494, 0]}
          scale={0.225}
          baseColor="#559DBD"
          hoverColor="#C1D8E0"
        />
        <MeshComponent
          name="5F"
          geometry={nodes['5F'].geometry}
          position={[49.462, 0, -17.712]}
          rotation={[-Math.PI, 1.118, -Math.PI]}
          scale={0.149}
          baseColor="#559DBD"
          hoverColor="#C1D8E0"
        />
        <MeshComponent
          name="M"
          geometry={nodes.M.geometry}
          position={[49.462, 0, -17.712]}
          rotation={[-Math.PI, 1.118, -Math.PI]}
          scale={0.149}
          baseColor="#559DBD"
          hoverColor="#C1D8E0"
        />
        <Html
          transform
          position={[0, 200, -30]}
          scale={20}
          rotation-y={Math.PI * 0.5}
        >
          <div
            className="annotation"
            style={{ display: isClicked ? 'none' : 'grid' }}
            onClick={() => handleNavigationClick('/building')}
          >
            <h1 style={{ fontSize: '1.3rem' }}>Building Details</h1>
          </div>
        </Html>
        <group name="building_omantel" position={[-0.682, 47.812, -34.713]} rotation={[-Math.PI, 0, -Math.PI]} scale={[79.145, 39.515, 106.143]}>
          <mesh name="Cylinder019" geometry={nodes.Cylinder019.geometry} material={materials['stripe.002']} />
          <mesh name="Cylinder019_1" geometry={nodes.Cylinder019_1.geometry} material={materials['gray.003']} />
          <mesh name="Cylinder019_2" geometry={nodes.Cylinder019_2.geometry} material={materials['dgray.002']} />
          <mesh name="Cylinder019_3" geometry={nodes.Cylinder019_3.geometry} material={materials['concrt.002']} />
          <mesh name="Cylinder019_4" geometry={nodes.Cylinder019_4.geometry} material={materials['glass.004']} />
          <mesh name="Cylinder019_5" geometry={nodes.Cylinder019_5.geometry} material={materials['window_text.002']} />
          <mesh name="Cylinder019_6" geometry={nodes.Cylinder019_6.geometry} material={materials['Material.018']} />
          <mesh name="Cylinder019_7" geometry={nodes.Cylinder019_7.geometry} material={materials['green.002']} />
          <mesh name="Cylinder019_8" geometry={nodes.Cylinder019_8.geometry} material={materials['roof.002']} />
        </group>
        <mesh
          name="building_omantel_tube"
          geometry={nodes.building_omantel_tube.geometry}
          position={[-0.682, 47.812, -34.713]}
          rotation={[-Math.PI, 0, -Math.PI]}
          scale={[79.145, 39.515, 106.143]}
        >
          <meshBasicMaterial ref={stripe} toneMapped={false} />
          <pointLight ref={light} intensity={0.1} color={[10, 2, 5]} distance={2.5} />
        </mesh>
      </group>
    </motion.group>
  );
}

useGLTF.preload('/all__floors.glb');
